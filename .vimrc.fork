" Basics
    set shell&

" General
    set fileencodings=ucs-bom,utf-8,gbk
    set fileformats=unix,dos,mac
    set viewoptions-=options
    set spell&
    set rnu
    set noswapfile
    set wildignore+=*-target,target,tmp_*
    set clipboard&
    set timeout
    set timeoutlen=300
    set ttimeoutlen=0
    set backupskip=/tmp/*,/private/tmp/*
    set wildignorecase
    set nomore
    set mouse=

" Vim UI
    let g:rehash256 = 1
    color molokai
    set scrolljump&
    set scrolloff&
    set list
    set listchars=tab:>-,trail:.,extends:>
    set ambiwidth=double
    set guifont=Droid\ Sans\ Mono\ For\ Powerline:h16
    " Always show sign col
    autocmd BufEnter * sign define dummy
    autocmd BufEnter * execute 'sign place 99999 line=1 name=dummy buffer=' . bufnr('')

" Formatting
    set wrap&
    autocmd FileType css,less,vm autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType jade setlocal sw=2 sts=2 st=2

" Key (re)Mappings
    nunmap j
    nunmap k
    vunmap <
    vunmap >

    unmap [F
    unmap [H
    iunmap [F
    iunmap [H

    set t_ku=OA
    set t_kd=OB
    set t_kr=OC
    set t_kl=OD

    " Paste yank register
    nmap gp "0p
    nmap gP "0P

    " Delete to blackhole
    nmap gd "_d
    nmap gD "_D

    " map double j to <esc>
    inoremap <silent> jj <esc>

    " Emacs style command line course move
    cnoremap <C-A> <Home>
    cnoremap <C-E> <End>

    " Visual block search
    function! VisualSearch(direction) range
        let l:saved_reg = @"
        execute "normal! vgvy"

        let l:pattern = escape(@", '\\/.*$^~[]')
        let l:pattern = substitute(l:pattern, "\n$", "", "")

        if a:direction == 'b'
            execute "normal ?" . l:pattern . "
        elseif a:direction == 'f'
            execute "normal /" . l:pattern . "
        endif

        let @/ = l:pattern
        let @" = l:saved_reg
    endfunction
    vnoremap <silent> * :call VisualSearch('f')<CR>
    vnoremap <silent> # :call VisualSearch('b')<CR>

    " Swap 0 and ^
    nnoremap 0 ^
    nnoremap ^ 0
    nnoremap d0 d^
    nnoremap d^ d0
    nnoremap c0 c^
    nnoremap c^ c0
    nnoremap s0 s^
    nnoremap s^ s0
    nnoremap y0 y^
    nnoremap y^ y0

    " Start shell
    map <Leader>sh :sh<CR>

    " search very magic like perl default, and use g/ to search very no magic
    nnoremap g/ /\v
    nnoremap g? ?\v

    map <space> :e #<cr>

" OmniComplete
    set completeopt-=preview

" Plugins
    " NeoBundle
        let g:neobundle#types#git#default_protocol = 'git'

    " NeoComplete
        if count(g:spf13_bundle_groups, 'neocomplete')
            if !exists('g:neocomplete#same_filetypes')
                let g:neocomplete#same_filetypes = {}
            endif
            let g:neocomplete#enable_fuzzy_completion = 0
            let g:neocomplete#same_filetypes.js = 'js'
            let g:neocomplete#same_filetypes.handlebars = 'handlebars'
            let g:neocomplete#same_filetypes.less = 'less,css'
            let g:neocomplete#same_filetypes.vm = 'vm'
            let g:neocomplete#use_vimproc = 1
            let g:neocomplete#disable_auto_complete = 1
            let g:neosnippet#enable_snipmate_compatibility = 0
            let g:neocomplete#enable_smart_case = 0
            let g:snips_author = 'zhangyc <zhangyc@fenbi.com>'

            if !exists('g:neocomplete#sources#file_include#exts')
                let g:neocomplete#sources#file_include#exts = {}
            endif
            let g:neocomplete#sources#file_include#exts.less = ['less', 'css']
            let g:neocomplete#sources#file_include#exts.javascript = ['js']

            if !exists('g:neocomplete#sources#file_include#exprs')
                let g:neocomplete#sources#file_include#exprs = {}
            endif
            let g:neocomplete#sources#file_include#exprs.javascript = 'fnamemodify(substitute(v:fname, "/", "::", "g"), ":r")'

            if count(g:spf13_bundle_groups, 'fenbi')
                let g:neosnippet#snippets_directory='~/.vim/bundle/fenbi-frontend/snippets'
            endif

            inoremap <expr><c-n> pumvisible() ? "\<C-n>" : neocomplete#start_manual_complete()
            inoremap <silent><expr><TAB> neosnippet#jumpable() ? neosnippet#jump_impl() :
                        \ (neosnippet#expandable() ? neosnippet#expand_impl() :
                        \ (pumvisible() ? "\<C-n>" : "\<TAB>"))
            iunmap <C-y>

            cabbrev nss NeoSnippetEdit -split
        endif

    " Tagbar
        nnoremap <silent> <F11> :TagbarToggle<cr>

    " NerdTree
        unmap <leader>e
        unmap <C-e>
        map <silent> <leader>nt :NERDTreeFind<CR>
        let NERDTreeIgnore = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.DS_Store']
        let NERDTreeQuitOnOpen = 0
        let NERDTreeShowHidden = 0

    " Tabularize
        nmap <Leader>a" :Tabularize /"<CR>
        vmap <Leader>a" :Tabularize /"<CR>
        nmap <Leader>a/ :Tabularize /\/<CR>
        vmap <Leader>a/ :Tabularize /\/<CR>

    " unite
        let g:unite_winheight = 10
        let g:unite_split_rule = 'botright'

        call unite#custom#source('file_rec/async,file_mru', 'matchers', ['matcher_glob'])
        call unite#custom#source('file_rec/async,file_mru', 'converters',['converter_relative_word'])
        call unite#custom#source('file_rec/async', 'sorters', ['sorter_ftime', 'sorter_rank'])
        nnoremap <silent> <C-p> :Unite -start-insert file_mru file_rec/async<cr>

        let g:unite_source_grep_max_candidates = 200
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden'
        let g:unite_source_grep_recursive_opt = ''

        call unite#custom#profile('source/grep', 'context', {'no_quit' : 1})
        nnoremap <silent> <f3> :Unite grep<cr>
        nnoremap <silent> <leader>* :UniteWithCursorWord grep<cr>

        let g:unite_source_history_yank_enable = 1
        nmap <leader>y :Unite history/yank<cr>

        nmap <f1> :Unite -start-insert help<cr>

    " Gist
        let g:gist_open_browser_after_post = 1

    " syntastic
        let g:syntastic_check_on_wq = 0
        let g:syntastic_mode_map = { 'mode': 'active',
                    \ 'active_filetypes': [],
                    \ 'passive_filetypes': ['html', 'java'] }

    " Emmet
       let g:user_emmet_leader_key = '<c-k>'

    " Indent guides
        let g:indent_guides_auto_colors = 0
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#212121 ctermbg=235
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=237

    " vitality
        let g:vitality_fix_focus = 0

    " eclim
        if count(g:spf13_bundle_groups, 'eclim')
            call unite#custom#source('eclim', 'converters',['converter_relative_word'])
            call unite#custom#source('eclim', 'sorters', ['sorter_ftime', 'sorter_rank'])
            nnoremap <silent> <C-p> :Unite -start-insert file_mru file_rec/async eclim<cr>

            noremap <c-j>l :ProjectRefresh<cr>
            noremap <c-j>e :ProjectTreeToggle<cr>
            noremap <c-j>c :JavaCorrect<cr>
            noremap <c-j>o :JavaImportOrganize<cr>
            noremap <c-j>r :JavaRename <c-r><c-w>
            noremap <c-j>m :JavaMove<cr>
            noremap <c-j>h :JavaHierarchy<cr>
            noremap <c-j>c :JavaCallHierarchy<cr>
            noremap <c-j>i :JavaImpl<cr>
            nnoremap <c-j>f :%JavaFormat<cr>
            vnoremap <c-j>f :JavaFormat<cr>
            noremap <c-j>uf :JUnitFindTest<cr>
            noremap <c-j>ui :JUnitImpl<cr>
            noremap <c-j>ut :JUnit<cr>
            noremap <c-j>ur :JUnitResult<cr>
        endif

    " airline
        let g:airline_branch_prefix = '‚éá '
        let g:airline_left_sep = ''
        let g:airline_right_sep = ''
        let g:airline_linecolumn_prefix = '‚êä '
        let g:airline_paste_symbol = '√û'

    " surround
        let g:surround_no_insert_mappings = 1

" GUI Settings
    " GVIM- (here instead of .gvimrc)
        if has('gui_running')
            set guioptions=
        endif

" Remove Bundle
    UnBundle 'spf13/vim-preview'
    UnBundle 'tpope/vim-cucumber'
    UnBundle 'quentindecock/vim-cucumber-align-pipes'
    UnBundle 'Puppet-Syntax-Highlighting'
    UnBundle 'Lokaltog/vim-easymotion'
    UnBundle 'vim-scripts/sessionman.vim'
    UnBundle 'terryma/vim-multiple-cursors'
    UnBundle 'matchit.zip'
    UnBundle 'jistr/vim-nerdtree-tabs'
    UnBundle 'flazz/vim-colorschemes'
    UnBundle 'godlygeek/tabular'
    UnBundle 'altercation/vim-colors-solarized'
    UnBundle 'spf13/vim-colors'
    UnBundle 'spf13/vim-autoclose'
    UnBundle 'godlygeek/csapprox'
    UnBundle 'flazz/vim-colorschemes'
    UnBundle 'briancollins/vim-jst'
    UnBundle 'kchmck/vim-coffee-script'
    UnBundle 'tpope/vim-haml'
    UnBundle 'airblade/vim-gitgutter'
    UnBundle 'kien/ctrlp.vim'
    UnBundle 'mileszs/ack.vim'
    UnBundle 'myusuf3/numbers.vim'
